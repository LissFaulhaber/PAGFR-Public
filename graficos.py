# -*- coding: utf-8 -*-
"""Graficos.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1dPRwsuuX_NTkHNnVGSt848vuvtaBRe_i
"""

import matplotlib.pyplot as plt
import numpy as np

# Dados das quantidades para cada modelo
modelos = ["PAGFR-Bellmans", "PAGFR-KKT", "PAGFR-SPL"]

# Quantidade de soluções para cada categoria
otimos = [3, 0, 3]  # GAP = 0,00%
nao_otimos = [1, 0, 4]  # GAP > 0%
nao_encontrados = [22, 26, 19]  # GAP = "-"
nao_executados = [19, 26, 19]  # Tempo = "-"

# Largura das barras
bar_width = 0.2
index = np.arange(len(modelos))

# Criar o gráfico de barras
plt.figure(figsize=(5, 3))

# Plotar cada categoria como barras separadas
plt.bar(index, otimos, bar_width, label="Ótimos Encontrados", color="#90caf9")
plt.bar(index + bar_width, nao_otimos, bar_width, label="Soluções Não Ótimas", color="#ffcc80")
plt.bar(index + 2 * bar_width, nao_encontrados, bar_width, label="Soluções Não Encontradas", color="#ef9a9a")
plt.bar(index + 2 * bar_width, nao_executados, bar_width, label="Instâncias Não Executadas", color="#ce93d8")

# Detalhes do gráfico
#plt.xlabel("Modelos")
#plt.ylabel("Quantidade de Instâncias")
#plt.title("Resultados ")
#plt.xticks(index + bar_width * 1.5, modelos)
#plt.legend(loc="upper right")
#plt.grid(axis="y", linestyle="--", alpha=0.7)

plt.xlabel("Modelos")
plt.ylabel("Quantidade de Instâncias")
plt.title("50 Pontos de Interesse")
plt.xticks(index + bar_width * 1.5, modelos)
plt.grid(axis="y", linestyle="--", alpha=0.5)


# Exibir o gráfico
plt.tight_layout()
plt.show()

import matplotlib.pyplot as plt
from mpl_toolkits.mplot3d import Axes3D
import pandas as pd

# Dados da tabela
dados = {
    'Instância': ['AC', 'AL', 'AM', 'AP', 'BA', 'CE', 'ES', 'GoeDF', 'MA', 'MG', 'MS', 'MT', 'PA', 'PB', 'PE', 'PI', 'PR', 'RJ', 'RN', 'RO', 'RR', 'RS', 'SC', 'SE', 'SP', 'TO'],
    'Pontos candidatos': [91, 192, 207, 75, 970, 514, 352, 929, 308, 2105, 532, 1339, 461, 431, 426, 486, 1018, 850, 378, 251, 153, 834, 531, 219, 1458, 432],
    'Território (mil km2)': [164, 28, 1559, 142, 565, 149, 46, 346, 330, 587, 357, 903, 1246, 56, 98, 252, 199, 44, 53, 238, 224, 282, 96, 22, 248, 277],
    'Solução encontrada': [6, 0, 10, 4, 10, 2, 0, 6, 3, None, 8, 13, 9, 1, 3, 8, 2, 1, 1, 3, 1, 10, 4, 0, 6, 7]
}

# Converter em DataFrame
df = pd.DataFrame(dados)

# Remover entradas com soluções não encontradas
df = df.dropna(subset=['Solução encontrada'])

# Criar a figura 3D
fig = plt.figure(figsize=(12, 8))
ax = fig.add_subplot(111, projection='3d')

# Plotar os pontos
ax.scatter(df['Território (mil km2)'], df['Pontos candidatos'], df['Solução encontrada'], c='b', marker='o', s=60)

# Adicionar rótulos aos pontos
for i, row in df.iterrows():
    ax.text(row['Território (mil km2)'], row['Pontos candidatos'], row['Solução encontrada'], row['Instância'])

# Configurações dos eixos
ax.set_xlabel('Território (mil km²)')
ax.set_ylabel('Pontos candidatos')
ax.set_zlabel('Solução encontrada')
ax.set_title('Relação entre Território, Pontos Candidatos e Postos Alocados')

plt.show()

import matplotlib.pyplot as plt

# Dados
instancias = ['AC', 'AL', 'AM', 'AP', 'BA', 'CE', 'ES', 'GoeDF', 'MA', 'MG', 'MS', 'MT', 'PA', 'PB', 'PE', 'PI', 'PR', 'RJ', 'RN', 'RO', 'RR', 'RS', 'SC', 'SE', 'SP', 'TO']
territorio = [164, 28, 1559, 142, 565, 149, 46, 346, 330, 587, 357, 903, 1246, 56, 98, 252, 199, 44, 53, 238, 224, 282, 96, 22, 248, 277]
pontos_candidatos = [91, 192, 207, 75, 970, 514, 352, 929, 308, 2105, 532, 1339, 461, 431, 426, 486, 1018, 850, 378, 251, 153, 834, 531, 219, 1458, 432]
postos_alocados = [6, 0, 10, 4, 10, 2, 0, 6, 3, None, 8, 13, 9, 1, 3, 8, 2, 1, 1, 3, 1, 10, 4, 0, 6, 7]

# Remover instâncias sem solução (postos_alocados = None)
instancias, territorio, pontos_candidatos, postos_alocados = zip(*[
    (inst, terr, pts, sol)
    for inst, terr, pts, sol in zip(instancias, territorio, pontos_candidatos, postos_alocados)
    if sol is not None
])

# Plot
plt.figure(figsize=(14, 8))
plt.scatter(territorio, postos_alocados, s=[p/5 for p in pontos_candidatos], c='royalblue', alpha=0.6, edgecolors='k')

# Adicionar rótulos nas instâncias
for i, inst in enumerate(instancias):
    plt.text(territorio[i], postos_alocados[i], inst, fontsize=10, ha='right')

# Estilização
plt.xlabel('Território (mil km²)')
plt.ylabel('Pontos Candidatos')
plt.title('Relação entre Território, Pontos Candidatos e Postos Alocados')
plt.grid(True)
plt.show()

import matplotlib.pyplot as plt

# Dados
instancias = ['AC', 'AL', 'AM', 'AP', 'BA', 'CE', 'ES', 'GoeDF', 'MA', 'MG', 'MS', 'MT', 'PA', 'PB', 'PE', 'PI', 'PR', 'RJ', 'RN', 'RO', 'RR', 'RS', 'SC', 'SE', 'SP', 'TO']
territorio = [164, 28, 1559, 142, 565, 149, 46, 346, 330, 587, 357, 903, 1246, 56, 98, 252, 199, 44, 53, 238, 224, 282, 96, 22, 248, 277]
pontos_candidatos = [91, 192, 207, 75, 970, 514, 352, 929, 308, 2105, 532, 1339, 461, 431, 426, 486, 1018, 850, 378, 251, 153, 834, 531, 219, 1458, 432]
postos_alocados = [6, 0, 10, 4, 10, 2, 0, 6, 3, None, 8, 13, 9, 1, 3, 8, 2, 1, 1, 3, 1, 10, 4, 0, 6, 7]

# Filtrar dados válidos (excluir None)
instancias, territorio, pontos_candidatos, postos_alocados = zip(*[
    (inst, terr, pts, sol)
    for inst, terr, pts, sol in zip(instancias, territorio, pontos_candidatos, postos_alocados)
    if sol is not None
])

# Definir cores baseadas na quantidade de postos alocados
cores = ['green' if sol <= 5 else 'blue' if sol <= 10 else 'red' for sol in postos_alocados]

# Plot
plt.figure(figsize=(14, 8))
plt.scatter(territorio, pontos_candidatos, s=[sol*30 for sol in postos_alocados], c=cores, alpha=0.7, edgecolors='k')

# Adicionar rótulos nas instâncias
for i, inst in enumerate(instancias):
    plt.text(territorio[i], pontos_candidatos[i], inst, fontsize=10, ha='right')

# Estilização
plt.xlabel('Território (mil km²)')
plt.ylabel('Pontos Candidatos')
plt.title('Relação entre Território, Pontos Candidatos e Postos Alocados')

# Legenda
import matplotlib.patches as mpatches
legend_elements = [
    mpatches.Patch(color='green', label='Até 5 postos'),
    mpatches.Patch(color='blue', label='6 a 10 postos'),
    mpatches.Patch(color='red', label='Mais de 10 postos')
]
plt.legend(handles=legend_elements, title='Postos Alocados')

plt.grid(True)
plt.show()

import matplotlib.pyplot as plt

# Dados
instancias = ['AC', 'AL', 'AM', 'AP', 'BA', 'CE', 'ES', 'GoeDF', 'MA', 'MG', 'MS', 'MT', 'PA', 'PB', 'PE', 'PI', 'PR', 'RJ', 'RN', 'RO', 'RR', 'RS', 'SC', 'SE', 'SP', 'TO']
territorio = [164, 28, 1559, 142, 565, 149, 46, 346, 330, 587, 357, 903, 1246, 56, 98, 252, 199, 44, 53, 238, 224, 282, 96, 22, 248, 277]
pontos_candidatos = [91, 192, 207, 75, 970, 514, 352, 929, 308, 2105, 532, 1339, 461, 431, 426, 486, 1018, 850, 378, 251, 153, 834, 531, 219, 1458, 432]
postos_alocados = [20, 21, 13, 5, 38, 35, 22, 39, 13, None, 28, 53, 7, 36, 33, 38, 25, 40, 32, 6, 5, 57, 42, 22, 49, 22]

# Filtrar dados válidos (excluir None)
instancias, territorio, pontos_candidatos, postos_alocados = zip(*[
    (inst, terr, pts, sol)
    for inst, terr, pts, sol in zip(instancias, territorio, pontos_candidatos, postos_alocados)
    if sol is not None
])

# Definir cores baseadas na quantidade de postos alocados
def definir_cor(sol):
    if sol <= 10:
        return 'green'
    elif sol <= 20:
        return 'blue'
    elif sol <= 30:
        return 'orange'
    elif sol <= 40:
        return 'purple'
    elif sol <= 50:
        return 'red'
    else:
        return 'black'

cores = [definir_cor(sol) for sol in postos_alocados]

# Plot
plt.figure(figsize=(14, 8))
plt.scatter(territorio, pontos_candidatos, s=[sol*20 for sol in postos_alocados], c=cores, alpha=0.7, edgecolors='k')

# Adicionar rótulos nas instâncias
for i, inst in enumerate(instancias):
    plt.text(territorio[i], pontos_candidatos[i], inst, fontsize=10, ha='right')

# Estilização
plt.xlabel('Território (mil km²)')
plt.ylabel('Pontos Candidatos')
plt.title('Relação entre Território, Pontos Candidatos e Postos Alocados')

# Legenda
import matplotlib.patches as mpatches
legend_elements = [
    mpatches.Patch(color='green', label='0-10 postos'),
    mpatches.Patch(color='blue', label='11-20 postos'),
    mpatches.Patch(color='orange', label='21-30 postos'),
    mpatches.Patch(color='purple', label='31-40 postos'),
    mpatches.Patch(color='red', label='41-50 postos'),
    mpatches.Patch(color='black', label='50+ postos')
]
plt.legend(handles=legend_elements, title='Postos Alocados')

plt.grid(True)
plt.show()